import { resolve } from "path";
import { defineNuxtConfig } from "nuxt";
// import { viteThemePlugin } from 'vite-plugin-theme';
import { getThemeColors } from './src/utils/themeUtil'
import { createSvgIconsPlugin }from 'vite-plugin-svg-icons';
import {
  themePreprocessorPlugin,
  themePreprocessorHmrPlugin,
} from "@zougt/vite-plugin-theme-preprocessor";
import path from 'path';

const pathResolve = (pathStr: string) => {
  return path.resolve(__dirname, pathStr);
};

// @ts-ignore

let nuxtAlies = {
  public: resolve(__dirname, "./public/"),

}
let viteAlies = [
  {
    find: '@',
    replacement: pathResolve('src') + '/',
  },


]
if(process.env.LAMBDA_ROOT !== "@lambda-platform/lambda-vue" && process.env.LAMBDA_ROOT != ""){
  nuxtAlies['@lambda-platform/lambda-vue'] = resolve(__dirname, process.env.LAMBDA_ROOT),

  viteAlies.push({
    find: '@lambda-platform/lambda-vue',
    replacement: pathResolve(process.env.LAMBDA_ROOT) + '/' ,
  })
}
export default defineNuxtConfig({

  alias: nuxtAlies,
  target: 'static',
  srcDir: "src/",
  app:{
    buildAssetsDir:"lambda_admin",
  },
  dir: {
    public: resolve(__dirname, "./public/"),
  },

  css: [
    '~/assets/styles/components/loading.css',
    '@/assets/styles/tailwind.css',
    "leaflet-draw/dist/leaflet.draw.css",
    '@lambda-platform/lambda-vue/src/modules/datagrid/scss/style.scss',
    '@lambda-platform/lambda-vue/src/modules/dataform/scss/style.scss',
    '@lambda-platform/lambda-vue/src/modules/dataform/scss/_dataform_dark.scss',
    '@lambda-platform/lambda-vue/src/modules/datagrid/scss/theme/_material.scss',
    '@lambda-platform/lambda-vue/src/modules/datagrid/scss/theme/_light.scss',
    '@lambda-platform/lambda-vue/src/modules/datagrid/scss/theme/_dark.scss',
    '~/assets/styles/app.scss',
  ],
  vite:{
    envPrefix:"LAMBDA_",
    server: {
      host: '0.0.0.0'
    },
    plugins: [
      createSvgIconsPlugin({
        iconDirs: [path.resolve(process.cwd(), 'src/assets/icons')],
        symbolId: 'icon-[dir]-[name]',
      }),
      // viteThemePlugin({
      //   colorVariables: [...getThemeColors()],
      // }),
      // themePreprocessorPlugin({
      //   less: {
      //     // Enable Dynamic theme mode.
      //     arbitraryMode: false,
      //     // Default theme colorï¼ŒIt is usually the same as a theme color (@primary-color) in src/theme/theme-vars.less .
      //     defaultPrimaryColor: "#3471f6",
      //     // Only one item of multipleScopeVars
      //     multipleScopeVars: [
      //       {
      //         // Any string, required
      //         scopeName: "theme-default",
      //         // path or varscontent must be selected
      //         path: path.resolve("src/assets/styles/theme/var.less"),
      //         // varsContent same as content in path
      //         // varsContent:`@primary-color:${defaultPrimaryColor};`
      //       },
      //       {
      //         // Any string, required
      //         scopeName: "theme-red",
      //         // path or varscontent must be selected
      //         path: path.resolve("src/assets/styles/theme/var_red.less"),
      //         // varsContent same as content in path
      //         // varsContent:`@primary-color:${defaultPrimaryColor};`
      //       },
      //       {
      //         // Any string, required
      //         scopeName: "theme-orange",
      //         // path or varscontent must be selected
      //         path: path.resolve("src/assets/styles/theme/var_orange.less"),
      //         // varsContent same as content in path
      //         // varsContent:`@primary-color:${defaultPrimaryColor};`
      //       },
      //     ],
      //     // The color in CSS is not generated by the theme color variable, and it can also be extracted into the theme CSS to improve the weight
      //     includeStyleWithColors: [
      //       {
      //         // color can be string or string[], example: ["#ffffff","#000"] or ["transparent","none"].
      //         color: "#ffffff",
      //         // Exclude css props, example: not be #ffffff in background.
      //         // excludeCssProps:["background","background-color"]
      //         // Exclude css selectors
      //         // excludeSelectors: [
      //         //   ".ant-btn-link:hover, .ant-btn-link:focus, .ant-btn-link:active",
      //         // ],
      //       },
      //     ],
      //   },
      //   // scss:{
      //
      //   // },
      // }),
      // // development need theme HMR
      // themePreprocessorHmrPlugin(),
    ],
    resolve: {
      alias: viteAlies,
      dedupe: [
        'vue'
      ]
    },
    css: {
      preprocessorOptions: {
        less: {
          javascriptEnabled: true,
        },
      },
    },
  },
  build: {
    postcss: {
      postcssOptions: require("./postcss.config.js"),
    },
  },

  "charset": "utf-8",
  "viewport": "width=device-width, initial-scale=1",
  meta: {
    meta: [
      { "http-equiv": "X-UA-Compatible", content: "IE=edge" },
      { name: "viewport", content: "width=device-width, initial-scale=1.0" },
      { name: "description", content: process.env.LAMBDA_DESCRIPTION  },
      { name: "og:url", content: process.env.LAMBDA_FAVICON },
      { name: "og:type", content: "article" },
      { name: "og:title", content: process.env.LAMBDA_TITLE },
      { name: "og:description", content: process.env.LAMBDA_DESCRIPTION },
      { name: "og:image", content: process.env.LAMBDA_FAVICON},
    ],
    link: [
      { rel: "icon", href: process.env.LAMBDA_FAVICON },
      { rel: 'stylesheet', href: '/assets/lambda/fonts/flaticons/flaticons.css' },
      { rel: 'stylesheet', href: '/assets/lambda/fonts/themify/themify-icons.css' },
    ],
  },
  generate: {
    routes: ["/"],
    subFolders: true,
  },
  ssr: false,
});
